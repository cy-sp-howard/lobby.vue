name: main action
on:
  workflow_dispatch:
    branches: [ deploy/online, deploy/beta ]
env:
  IMAGE_NAME: gameapi.bitlobby
jobs:
  build_web:
    name: 編譯程式
    runs-on: ubuntu-latest
    outputs:
      BUILD_VERSION: ${{ steps.generate_build_version.outputs.build_version }}
    steps:
      - name: 檢查分支
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: 產生版本號
        id: generate_build_version
        run: |
          BUILD_VERSION=1.0.`git rev-list HEAD --count`.$GITHUB_RUN_NUMBER
          echo "build_version=$BUILD_VERSION" >> $GITHUB_OUTPUT
          echo "$IMAGE_NAME:$BUILD_VERSION"

      - name: 初始化node
        uses: actions/setup-node@v3
        with:
          node-version-file: 'package.json'

      - name: 安裝依賴
        uses: pnpm/action-setup@v2
        with:
          run_install: |
            - args: [--frozen-lockfile]
          
      - name: 編譯online環境
        if: github.ref == 'refs/heads/deploy/online'
        run: pnpm build:prod

      - name: 編譯beta環境
        if: github.ref == 'refs/heads/deploy/beta'
        run: pnpm build:beta

      - name: 加入額外檔案
        run: |
          echo "BUILD_NUMBER=`git rev-list HEAD --count`" >> .env
          echo "${{ steps.generate_build_version.outputs.build_version }}" > dist/version.html
          echo "OK" > dist/healthCheck.html
          cat .env
      - name: 留存artifact
        uses: actions/upload-artifact@v2
        with:
          name: publish
          path: |
            dist
            .env
            Dockerfile
            nginx.conf
          retention-days: 1

  deploy_gcp:
    name: 部屬至GCP
    runs-on: ubuntu-latest
    needs: build_web
    steps:      
      - name: Set env BRANCH
        run: echo "BRANCH_BASE=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - name: 下載artifact
        uses: actions/download-artifact@v2
        with:
          name: publish
                
      # 驗證GCP專案金鑰
      - name: 'Auth Prod'
        if: env.BRANCH_BASE == 'online'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{secrets.GAR_KEY_PROD}}'
        
      - name: 'Auth Beta'     
        if: env.BRANCH_BASE == 'beta'      
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{secrets.GAR_KEY_BETA}}'      
        
      - name: 'Use gcloud CLI'
        run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker asia-east2-docker.pkg.dev
        
      - name: GCP Prod Publish
        if: env.BRANCH_BASE == 'online'
        run: |         
          gcloud auth configure-docker asia-northeast1-docker.pkg.dev
          echo "BuildNumber:${{needs.build_web.outputs.BUILD_VERSION}}"
          source .env
          docker build -t asia-northeast1-docker.pkg.dev/openapi-prod/gameapi/$IMAGE_NAME:${{needs.build_web.outputs.BUILD_VERSION}} .
          docker push asia-northeast1-docker.pkg.dev/openapi-prod/gameapi/$IMAGE_NAME --all-tags
          ls -al
          
      - name: GCP Beta Publish
        if: env.BRANCH_BASE == 'beta'
        run: |         
          gcloud auth configure-docker asia-northeast1-docker.pkg.dev
          echo "BuildNumber:${{needs.build_web.outputs.BUILD_VERSION}}"
          source .env
          docker build -t asia-northeast1-docker.pkg.dev/techu-beta/gameapi/$IMAGE_NAME:${{needs.build_web.outputs.BUILD_VERSION}} .
          docker push asia-northeast1-docker.pkg.dev/techu-beta/gameapi/$IMAGE_NAME --all-tags
          ls -al
      # docker build -t 2次代表產生2個tag, 分別是帶有版號的 還有latest
      # docker push 所有tag 到gcp服務上

      - name: Notify Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            Github Workflow Completed!
            Branch: *${{ env.BRANCH_BASE }}*
            Image: *${{ env.IMAGE_NAME }}*
            Version: `${{needs.build_web.outputs.BUILD_VERSION}}`
            Author: *${{ github.actor }}*

      - name: Delete Artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: publish
